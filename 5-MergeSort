#include<stdio.h>
#include<stdlib.h>
void worst(int *arr,int beg,int end)
{
    if(beg<end)
    {
        int mid=(beg+end)/2;
        int i,j,k;
        int n1=(mid-beg)+1;
        int n2=(end-mid);
        int a[n1],b[n2];
        for(i=0;i<n1;i++)
            a[i]=arr[(2*i)];
        for(j=0;j<n2;j++)
            b[j]=arr[(2*j)+1];
        worst(a,beg,mid);
        worst(b,mid+1,end);
        for(i=0;i<n1;i++)
        {
            arr[i]=a[i];
        }
        for(j=0;j<n2;j++)
        {
            arr[i+j]=b[j];
        }
    }
}
int merge(int b[],int c[],int a[],int n,int m)
{
    int i=0,j=0,k=0,ct=0;
    while(i<n && j<m)
    {
      if(b[i]<c[j])
      {
        a[k]=b[i];
        i++;
      }
      else
      {
        a[k]=c[j];
        j++;
      }
      k++;
      ct++;
    }
    while(i<n)
    {
      a[k]=b[i];
      i++;
      k++;
    }
    while(j<m)
    {
      a[k]=c[j];
      j++;
      k++;
    }
    return ct;
}
void mergeSort(int a[],int n,int *ct)
{
    int i=0,j=0;
    if(n==1) return;
    else
    {
      int b[n/2];
      int c[n/2];
      int i,blen=0,clen=0;
      for(i=0;i<n/2;i++)
      {
        b[i]=a[i];
        blen++;
      }
      i=0;
      for(j=n/2;j<n;j++)
      {
        c[i]=a[j];
        i++;
        clen++;
      }
      mergeSort(b,n/2,ct);
      mergeSort(c,n/2,ct);
      *(ct)+=merge(b,c,a,blen,clen);
    }
}
void main()
{
    FILE *f;
    int n=4,*a,i,ct=0;
    f = fopen("merge_time.txt","w");
    while(n<=4096)
    {
      n*=2;
      ct=0;
      a = (int*)malloc(n* sizeof(int));
      //best case
      for(i=0;i<n;i++)
        a[i]=i+1;
      mergeSort(a,n,&ct);
      printf("best ct %d\t for n: %d\t",ct,n);
      fprintf(f,"%d\t%d\t",n,ct);
      
      //worst case
      ct=0;
      gen_worst_data(a,0,n-1);
      mergeSort(a,n,&ct);
      printf("worst ct %d\t for n: %d\n",ct,n);
      fprintf(f,"%d\t%d\n",n,ct);
    }
    fclose(f);
    system("gnuplot > load 'merge_plot.txt' ");
}
